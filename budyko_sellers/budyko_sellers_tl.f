C        Generated by TAPENADE     (INRIA, Ecuador team)
C  Tapenade 3.16 (develop) -  4 Oct 2024 08:42
C
C  Differentiation of f in forward (tangent) mode:
C   variations   of useful results: j
C   with respect to varying inputs: xxs
C   RW status of diff variables: j:out xxs:in
C ---------------------------------
      SUBROUTINE F_TL(xxs, xxs_tl, j, j_tl)
      IMPLICIT NONE
      INTEGER n, i, iter, max_iter
      PARAMETER (n=100, max_iter=100000)
      REAL*8 x(n), xedges(n+1), dx
      REAL*8 lat(n), t(n), tnew(n), alpha(n)
      REAL*8 t_tl(n), tnew_tl(n), alpha_tl(n)
      REAL*8 fin(n), fout(n), fdiff(n), dt, diff, tol
      REAL*8 fin_tl(n), fout_tl(n), fdiff_tl(n)
      REAL*8 s0, q, sigma, epsilon
      REAL*8 sx(n), dtdx, dtdx_m, dtdx_p
      REAL*8 sx_tl(n), dtdx_m_tl, dtdx_p_tl
      REAL*8 xm, xp, a1, a2, t1, t2
      REAL*8 xxs(n)
      REAL*8 xxs_tl(n)
      REAL*8 j
      REAL*8 j_tl
      INTRINSIC FLOAT
      INTRINSIC ASIN
      REAL*8 result1
      INTEGER ii1
C
CADJ INIT tapex = 'TAF_tape'
C
C --- Constants
      s0 = 1366.d0
      q = s0/4.d0
      sigma = 5.67d-8
      epsilon = 0.63d0
      diff = 0.6d0
      tol = 1.d-9
C
C --- Grid setup (x = sin(lat))
      DO i=1,n+1
        xedges(i) = -1.d0 + 2.d0*(i-1)/FLOAT(n)
      ENDDO
      DO i=1,n
        x(i) = 0.5d0*(xedges(i)+xedges(i+1))
      ENDDO
      dx = x(2) - x(1)
C
C --- Latitude in degrees
      DO i=1,n
        result1 = ASIN(x(i))
        lat(i) = result1*180.d0/3.14159265d0
      ENDDO
      DO ii1=1,n
        sx_tl(ii1) = 0.D0
      ENDDO
C
C --- Insolation
      DO i=1,n
        sx_tl(i) = xxs_tl(i)
        sx(i) = q*(1.d0-0.482d0*x(i)**2)*1.35d0 - 55.d0 + xxs(i)
      ENDDO
C
C --- Initial temperature guess
      DO i=1,n
        t(i) = 288.d0 + 60.d0*(1.d0-x(i)**2) - 20.d0
      ENDDO
C
C --- Time step (CFL-like)
      dt = dx**2/(2.d0*diff)*0.5d0
C
C --- Albedo parameters
      t1 = 223.15d0
      t2 = 293.15d0
      a1 = 0.9d0
      a2 = 0.2d0
      DO ii1=1,n
        fdiff_tl(ii1) = 0.D0
      ENDDO
      DO ii1=1,n
        tnew_tl(ii1) = 0.D0
      ENDDO
      DO ii1=1,n
        t_tl(ii1) = 0.D0
      ENDDO
      DO ii1=1,n
        alpha_tl(ii1) = 0.D0
      ENDDO
      DO ii1=1,n
        fin_tl(ii1) = 0.D0
      ENDDO
      DO ii1=1,n
        fout_tl(ii1) = 0.D0
      ENDDO
C
C --- Iterative solver to find T(x) that
C --- balances Energy In = Energy Out
C
      DO iter=1,max_iter
CADJ STORE t = tapex
C
C --- Albedo (linear)
        DO i=1,n
          IF (t(i) .LE. t1) THEN
            alpha_tl(i) = 0.D0
            alpha(i) = a1
          ELSE IF (t(i) .GE. t2) THEN
            alpha_tl(i) = 0.D0
            alpha(i) = a2
          ELSE
            alpha_tl(i) = (a2-a1)*t_tl(i)/(t2-t1)
            alpha(i) = a1 + (a2-a1)*(t(i)-t1)/(t2-t1)
          END IF
        ENDDO
C
C --- Radiation terms
        DO i=1,n
          fin_tl(i) = (1.d0-alpha(i))*sx_tl(i) - sx(i)*alpha_tl(i)
          fin(i) = sx(i)*(1.d0-alpha(i))
          fout_tl(i) = epsilon*sigma*4*t(i)**3*t_tl(i)
          fout(i) = epsilon*sigma*t(i)**4
        ENDDO
C
C --- Diffusion
        DO i=1,n
          IF (i .EQ. 1) THEN
            dtdx_m = 0.d0
            dtdx_m_tl = 0.D0
          ELSE
            dtdx_m_tl = (t_tl(i)-t_tl(i-1))/dx
            dtdx_m = (t(i)-t(i-1))/dx
          END IF
          IF (i .EQ. n) THEN
            dtdx_p = 0.d0
            dtdx_p_tl = 0.D0
          ELSE
            dtdx_p_tl = (t_tl(i+1)-t_tl(i))/dx
            dtdx_p = (t(i+1)-t(i))/dx
          END IF
          xm = xedges(i)
          xp = xedges(i+1)
          fdiff_tl(i) = diff*((1.d0-xp**2)*dtdx_p_tl-(1.d0-xm**2)*
     +      dtdx_m_tl)/dx
          fdiff(i) = diff*((1.d0-xp**2)*dtdx_p-(1.d0-xm**2)*dtdx_m)/dx
        ENDDO
C
C --- Update temperature
        DO i=1,n
          tnew_tl(i) = t_tl(i) + dt*(fin_tl(i)-fout_tl(i)+fdiff_tl(i))
          tnew(i) = t(i) + dt*(fin(i)-fout(i)+fdiff(i))
        ENDDO
        DO i=1,n
          t_tl(i) = tnew_tl(i)
          t(i) = tnew(i)
        ENDDO
      ENDDO
C
C
C --- J is the Equator to Pole temperature difference
C --- Takes the average of the two bands around the equator
C --- 1/2 * ( T(50) + T(51) ) 
C --- and the average the average of the band around the north pole
C --- and south pole 
C --- 1/2 * ( T(1)  + T(N) )
C
      j_tl = 0.5*(t_tl(50)+t_tl(51)) - 0.5*(t_tl(1)+t_tl(n))
      j = 0.5*(t(50)+t(51)) - 0.5*(t(1)+t(n))
C ---     Avg. T around Eq.    -   Avg T around poles
C
C --- Write diagnostic output to disk
      OPEN(10, file='latitude.txt') 
      OPEN(11, file='temperature.txt') 
      OPEN(12, file='albedo.txt') 
      OPEN(13, file='F_in.txt') 
      OPEN(14, file='F_out.txt') 
      OPEN(15, file='F_diff.txt') 
      OPEN(16, file='net_flux.txt') 
      OPEN(17, file='J.txt') 
C
      DO i=1,n
        WRITE(10, *) lat(i)
        WRITE(11, *) t(i)
        WRITE(12, *) alpha(i)
        WRITE(13, *) fin(i)
        WRITE(14, *) fout(i)
        WRITE(15, *) fdiff(i)
        WRITE(16, *) fin(i) - fout(i) + fdiff(i)
      ENDDO
      WRITE(17, *) j
      CLOSE(10) 
      CLOSE(11) 
      CLOSE(12) 
      CLOSE(13) 
      CLOSE(14) 
      CLOSE(15) 
      CLOSE(16) 
      CLOSE(17) 
C
      END

